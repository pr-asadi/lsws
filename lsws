#!/bin/sh
#
# vim: tabstop=8 indentwidth=8 softtab=8 columns=80
# kak: tabstop=8 indentwidth=0 autowrap_column=88
# 
# If you use Kakoune, you need to run `modeline-parse' and '`autowrap-enable'
# commands.

LSWS_DEFAULT_OPTIONS="$HOME/.lsws/config/lsws.defaults"
WALLPAPER_NAME="$HOME/.lsws/logs/current_wallpaper"
WALLPAPER_LOGS="$HOME/.lsws/logs/wallpaper_logs"
WALLPAPERS_RESTORE_LOGS="$HOME/.lsws/logs/wallpaper_res_logs"

RED="\033[0;31m"
GREEN="\033[0;32m "
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
PINK="\033[0;35m"
CYAN="\033[0;36m" 
UNDERS="\033[0;4m"
BOLD="\033[0;1m"
RESET="\033[0m"

restore() {
	local OUTPUT=$(cat "${WALLPAPERS_RESTORE_LOGS}" | tail -n 2 | head -n 1)
	$APP ${APP_FLAG} "${OUTPUT}" >> /dev/null  && \
		printf "${OUTPUT}\n" > "${WALLPAPER_NAME}"
}

secondrestore() {
	local FLAG="$1"
	local PIC="$2"

	if [ -z "$(cat "$WALLPAPERS_RESTORE_LOGS")" ]; then
		printf "${RED}%s${RESET}\n" \
			"No wallpapers found in $WALLPAPERS_RESTORE_LOGS" >&2

		exit 2
	fi

	
	if [ "${FLAG}" = "-p" ]; then
		local OUTPUT=$(awk -v n=$PIC \
			'{saved[NR % n] = $1} END{if (NR >= n) print saved[(NR + 1) % n]}' < "$WALLPAPERS_RESTORE_LOGS")
			printf "$OUTPUT"

		$APP $APP_FLAG "${OUTPUT}" > /dev/null && \
			printf "${OUTPUT}\n" > "${WALLPAPER_NAME}"

		printf "${GREEN}${OUTPUT}${RESET} is the wallpaper.\n"

	elif [ "${FLAG}" = "-n" ]; then
		local OUTPUT=$(awk -v n=$PIC 'NR==n {print $1}' < "${WALLPAPERS_RESTORE_LOGS}")
		$APP $APP_FLAG "${OUTPUT}" > /dev/null && \
			printf "${OUTPUT}\n" > "${WALLPAPER_NAME}"

		printf "${GREEN}${OUTPUT}${RESET} is the wallpaper.\n"
	else
		exit 1
	fi
}

set_wallpaper() {
	if [ "${DIRECTORY:-null}" = null ]; then
		# ${DIRECTORY:-null} means if DIRECTORY was undefined, set it to null.
		printf "${RED}exited${RESET}${UNDERS}(DIRECTORY variable)${RESET}\n" && \
			exit 1

	elif [ "${IGNORE:-null}" = null ] && [ "${APP:-null}" != null ]; then
		printf "${GREEN}passed${RESET}${UNDERS}(IGNORE variable)${RESET}\n"

	elif [ "${APP:-null}" = null ]; then
		printf "${RED}exited${RESET}${UNDERS}(APP variable)${RESET}\n" && exit 1
	fi

	local WALLPAPERS_COUNT=$(ls $DIRECTORY | wc -l)
	local WALLPAPERS_COUNT=$(printf $WALLPAPERS_COUNT  | sed "s/\ //g")
	local RAND=$(printf " " | awk \
		'srand() {printf("%d%d\n", (300 * rand()) * 2, (300 * rand()) * 2 )}')
	local RAND_NUMBER=$( expr $RAND % $WALLPAPERS_COUNT)
	local COUNTER=0
	IFS=$'\n'

	for i in $(ls ${DIRECTORY}); do

		if [ "$COUNTER" = "$RAND_NUMBER" ]; then

			local OUTPUT=$(printf "$IGNORE" | grep -i "$i")

			if [ -n "$OUTPUT" ]; then

				printf "\n%s %s %s\n" \
					"$(date +%y/%m/%d-%H:%M:%S) << this wallpaper passed:" \
					"${i}(because you set it to IGNORE" \
					"variable) >>" >> "$WALLPAPER_LOGS"

				printf "${GREEN}\nwallpaper skipped:${RESET} ${PINK}%s\n${RESET}" "$i"

				continue
			fi

			printf "$0: wallpaper: ${BLUE}%s${RESET}\n" "$i"

			$APP ${APP_FLAG} ${DIRECTORY}${i} >> "${WALLPAPER_LOGS}"

			printf "${DIRECTORY}${i}" > "${WALLPAPER_NAME}"
			printf "${DIRECTORY}${i} $(date +%Y-%B-%d)\n" >> "${WALLPAPERS_RESTORE_LOGS}"
		fi

		let COUNTER+=1 > /dev/null
	done
}

setcustomwallpaper() {
	local FILE="$1"
	
	if [ -f "$FILE" ]; then
		$APP ${APP_FLAG} "${FILE}" >> "${WALLPAPER_LOGS}"
		printf "${FILE}" > "${WALLPAPER_NAME}"
		printf "${FILE} $(date +%Y-%B-%d)\n" >> "${WALLPAPERS_RESTORE_LOGS}"
		if [ "$KILL_REPITITIVE_PROC" = "y" ]; then
			kill -s TERM $(pgrep -f lsws) 2> /dev/null
			
			if [ "$?" -ne 0 ]; then
				clear
				printf "${GREEN}%s${RESET}\n" \
					"Can not kill the process/processes. Perhaps there are not any processes."
			fi

			$APP $APP_FLAG "$FILE" >> "${WALLPAPER_LOGS}"
			printf "${FILE}" > "${WALLPAPER_NAME}"
			printf "${FILE} $(date +%Y-%B-%d)\n" >> "${WALLPAPERS_RESTORE_LOGS}"
			
		elif [ "$KILL_REPITITIVE_PROC" = "n" ]; then
			$APP $APP_FLAG "$FILE" >> "${WALLPAPER_LOGS}"
			printf "${FILE}" > "${WALLPAPER_NAME}"
			printf "${FILE} $(date +%Y-%B-%d)\n" >> "${WALLPAPERS_RESTORE_LOGS}"

		else
			printf "the KILL_REPITITIVE_PROC variable is not set correctly.\nLook at ~/.lsws/config/lsws.defaults file.\n"
			exit 1;
		fi

	else
		printf "%s %s %s\n" "${FILE}" \
			"does not exist or maybe file has space character, read the man" \
			"page: ${UNDERS}\$ man 1 lsws\n"
	fi

	unset IFS FILE
}

replacer() {
	local DIR="$1"
	local DEFAULT_SEP="$2"
	CHECK_TEMP=$(printf "$DIR" | grep "\/$")
	
	test "$?" != 0 && DIR="$DIR/"
	printf "dir: $DIR\nDefault: $DEFAULT_SEP\n"
	
	if [ -d "$DIR" ]; then
		
		IFS=$'\n'

		for i in $(ls "${DIR}");do

			CHECK=$(printf "%s" "${i}" | grep "\ " )

			if [ "$?" = 0 ]; then
				CHNAME=$(printf "$i" | tr "\ " "$DEFAULT_SEP")
				mv -v "${DIR}${i}" "${DIR}${CHNAME}"
			else
				:
			fi
		done
	fi
	unset IFS
}

seasonal() {

	case "$USE_SEASONAL" in
		[Nn][Oo]|n|N)
			printf "Check USE_SEASONAL variable value in $HOME/.lsws/config/lsws.defaults\n" > "$HOME/.lsws/logs/Seasonal_error"
			exit 1;
			;;
	esac
	local SLEEP_TIME_INPUT="$1"
	local SLEEP_TIME_INPUT=$(expr "$SLEEP_TIME_INPUT" \* 60 )
	DIRECTORY="$HOME/.lsws/config/Seasonal.defaults"
	DIRECTORY_SELECT=$(cat "$DIRECTORY" | awk 'NR==1 {print $1}')
	WCOUTPUT=$(wc -l "$DIRECTORY" | awk '{print $1}')
	CHECK_FOR_SLASH=$(printf "$DIRECTORY_SELECT" | grep "\/$")
	test "$?" = 1 && local DIRECTORY_SELECT="${DIRECTORY_SELECT}/"

	while [ "$WCOUTPUT" !=  0 ]; do

		DIRECTORY_SELECT=$(cat "$DIRECTORY" | awk 'NR==1 {print $1}')

		test "$VERBOSE_MODE" = "y" && \
			printf "Wallpapers Directory: ${YELLOW}${DIRECTORY_SELECT}\n${RESET}"
			
		WCOUTPUT=$(wc -l $DIRECTORY | awk '{print $1}')
		DATE_SELECT=$(awk '{print $2}' "$DIRECTORY" | head -n 1)
		FIRST_LINE=$(cat $DIRECTORY | head -n 1)

		test "$VERBOSE_MODE" = "y" && \
			printf "$HOME/.lsws/config/Seasonal.defaults lines count: "
			printf "${GREEN}${WCOUTPUT}\n${RESET}"

		test "$VERBOSE_MODE" = "y" && \
			printf "Date in File: ${BLUE}${DATE_SELECT}\n${RESET}"

		test "$VERBOSE_MODE" = "y" && \
			printf "Selected Directory: ${YELLOW} "${DIRECTORY_SELECT}"${RESET}\n"

		SYSTEM_DATE=$(date +%F)
		DATE_SELECT_TEMP=$(printf "$DATE_SELECT" | sed "s/\-//g")
		SYSTEM_DATE_TEMP=$(printf "$SYSTEM_DATE" | sed "s/\-//g")

		if [ -n "$DATE_SELECT_TEMP" ]; then
			if [ "$DATE_SELECT_TEMP" -lt "$SYSTEM_DATE_TEMP" ]; then
				printf "Entered time is little than system time.\n" > $HOME/.lsws/logs/Seasonal_error
				exit 1
			fi
		fi

		if [ "$WCOUTPUT" != 0 ]; then

			until [ "$SYSTEM_DATE_TEMP" = "$DATE_SELECT_TEMP" ]; do
				SYSTEM_DATE=$(date +%F)
				SYSTEM_DATE_TEMP=$(printf "$SYSTEM_DATE" | sed "s/\-//g")
				sleep 5
				test "$VERBOSE_MODE" && \
					{
						printf "System Date: ${BLUE}${SYSTEM_DATE}\n${RESET} "
						printf "Date in File: ${BLUE}${DATE_SELECT}\n${RESET}"
					}
			done
			sleep 3;clear
		fi

		unset SYSTEM_DATE_TEMP DATE_SELECT_TEMP
		test "$VERBOSE_MODE" = "y" && \
			printf "Wallpapers Directory: ${YELLOW}${DIRECTORY_SELECT}\n${RESET}"

		DIRECTORY_SELECT=$(cat "$DIRECTORY" | awk 'NR==1 {print $1}')

		while [  "${SYSTEM_DATE}" = "${DATE_SELECT}" ]; do
			DIRECTORY_SELECT=$(cat "$DIRECTORY" | awk 'NR==1 {print $1}')
			SYSTEM_DATE=$(date +%F)
			sleep $SLEEP_TIME_INPUT
			WALLPAPERS_COUNT=$(ls $DIRECTORY_SELECT | wc -l)

			test "$VERBOSE_MODE" = "y" && \
				{
					printf "wallpapers count in directory: "
					printf "${YELLOW}${WALLPAPERS_COUNT}\n${RESET}"
				}

			WALLPAPERS_COUNT=$(printf $WALLPAPERS_COUNT  | sed "s/\ //g")
			RAND_NUMBER=$(printf " " | awk
				'srand() {printf("%d%d\n", (300 * rand()) * 2, (300 * rand()) * 2 )}')

			RAND_NUMBER=$(expr $RAND_NUMBER % $WALLPAPERS_COUNT)
			COUNTER=0
			FIRST_LINE=$(cat "$DIRECTORY" | head -n 1)
			IFS=$'\n'

			for i in $(ls ${DIRECTORY_SELECT});do
				if [ "$COUNTER" = "$RAND_NUMBER" ]; then
					test "$VERBOSE_MODE" = "y" && \
						printf "Wallpaper: ${PINK}${i}${RESET}\n"

					$APP ${APP_FLAG} ${DIRECTORY_SELECT}${i} >> "${WALLPAPER_LOGS}"

					printf "${DIRECTORY_SELECT}${i}" > "${WALLPAPER_NAME}"
					printf "${DIRECTORY_SELECT}${i} $(date +%Y-%B-%d)\n" >> "${WALLPAPERS_RESTORE_LOGS}"
				fi
				let COUNTER+=1 > /dev/null
			done
		done
		printf "Removing: $DIRECTORY_SELECT\n"
		TEMP=$(grep -v "$FIRST_LINE" "$DIRECTORY")
		TEMP=$(printf "$TEMP" > $DIRECTORY)

		if [ ! -z "$TEMP" ]; then
			test "$VERBOSE_MODE" = "y" && \
			{
				printf "$HOME/.lsws/configs/Seasonal.defaults contents: "
				printf "${GREEN}${TEMP}\n${RESET}"
			}
		fi
	done
}

clean_logs() {

	if [ $(wc -l $WALLPAPER_LOGS | awk '{print $1}' ) -gt 5000 ]; then
		: > "$WALLPAPER_LOGS"
	fi

	if [ $(wc -l $WALLPAPERS_RESTORE_LOGS | awk '{print $1}' ) -gt 2500 ]; then
		: > "$WALLPAPERS_RESTORE_LOGS"
	fi
}

TEMP=$(getopt "rwhp:n:lct:Cs:R:S:" "$*")
if [ $? -ne 0 ]; then
	printf "${RED}Terminating...\n${RESET}"
	exit 1
fi

if [ -e "$LSWS_DEFAULT_OPTIONS" ]; then
	. "$LSWS_DEFAULT_OPTIONS"
fi
eval set -- "$TEMP"
unset TEMP

clean_logs

IFS=$'\n'
while [ true ]; do

	case "$1" in
		'-r')
			restore
			break
			;;

		'-w')
			set_wallpaper
			break
			;;

		'-p')
			NUMBER="$2"
			ARG="$1"
			secondrestore ${ARG} ${NUMBER}
			break
			;;

		'-n')
			NUMBER="$2"
			ARG="$1"
			secondrestore ${ARG} ${NUMBER}
			break
			;;

		'-l')
			OUTPUT=$(cat ${WALLPAPERS_RESTORE_LOGS})
			if [ $(wc -l $WALLPAPERS_RESTORE_LOGS | awk '{print $1}') -gt 40 ]; then
				$PAGER $WALLPAPERS_RESTORE_LOGS
				exit 0
			fi

			printf "last set wallpapers: \n${BOLD}${OUTPUT}\n${RESET}"
			break
			;;

		'-c')
			: > "${WALLPAPERS_RESTORE_LOGS}"
			printf "done.\n"
			break
			;;

		'-t')
			TIME=$(expr $2 \* 60)
			printf "${CYAN}Directory:${RESET} %s\n\n" "$DIRECTORY"
			while [ true ]; do
				set_wallpaper
				sleep $TIME
			done

			break
			;;

		'-C')
			OUTPUT=$(cat $WALLPAPER_NAME)
			printf "${YELLOW}${OUTPUT}${RESET}\n"
			break
			;;

		'-s')
			ARG="$2"
			setcustomwallpaper "$ARG"
			break
			;;

		'-R')
			DIR_INPUT="$2"
			DELIM="$3"

			if [ -z "$DELIM" ]; then
				DELIM="_"

			elif [ "$DELIM" = '--' ]; then
				DELIM="_"
			fi

			replacer $DIR_INPUT $DELIM
			break
			;;

		'-S')
			seasonal "$2"
			break
			;;

		'-L')
			clean_logs
			break
			;;

		'-h')
                        printf "Usage: lsws OPTION\nRead lsws(1) for more information.\n"
                        exit 1
			break
			;;

		'--')
			shift
			break
			;;

		*)
			printf "Internal error.\n"
			exit 1
			;;

	esac
done

if [ -z "$1" ]; then
	printf "lsws: missing operand\nTry 'lsws -h' for more information.\n"
fi

